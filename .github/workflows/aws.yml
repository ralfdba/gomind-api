name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
      - qa

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 'qa'
    #environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'qa' }}

    env:
      AWS_ACCOUNT_NUMBER: ${{ vars.AWS_ACCOUNT_NUMBER }}
      AWS_REGION: "us-east-1"
      AWS_ECS_CLUSTER: ${{ vars.AWS_ECS_CLUSTER }}
      AWS_ECS_SERVICE: ${{ vars.AWS_ECS_SERVICE }}
      AWS_ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
      IMAGE_TAG: "${{ vars.IMAGE_NAME }}"
      BUILD_PATH: ${{ vars.BUILD_PATH }}
      ENV_ENVIRONMENT: ${{ vars.ENVIRONMENT}}
      ENV_JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ENV_MARIADB_CONNECTION: ${{ secrets.MARIADB_CONNECTION }}
      
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/github-actions-role
          role-session-name: Session-GitHubActions
          aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Docker image
      run: |
        docker build \
        --build-arg BUILD_PATH=$BUILD_PATH \
        --build-arg ENV_ENVIRONMENT=$ENV_ENVIRONMENT \
        --build-arg ENV_JWT_SECRET=$ENV_JWT_SECRET \
        --build-arg ENV_MARIADB_CONNECTION=$ENV_MARIADB_CONNECTION \
        -t $AWS_ECR_REPOSITORY:$IMAGE_TAG-${{ github.run_number }} -f ./${BUILD_PATH}Dockerfile .
        docker tag $AWS_ECR_REPOSITORY:$IMAGE_TAG-${{ github.run_number }} $AWS_ECR_REPOSITORY:$IMAGE_TAG-latest

    - name: Push Docker image to ECR
      run: |
        docker push $AWS_ECR_REPOSITORY:$IMAGE_TAG-${{ github.run_number }}
        docker push $AWS_ECR_REPOSITORY:$IMAGE_TAG-latest

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --force-new-deployment

